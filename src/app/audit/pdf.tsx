"use client";

import React from "react";
import { jsPDF } from "jspdf";

interface Recommendation {
  text: string;
  priority: "High" | "Medium" | "Low";
}

interface AuditReport {
  seo?: number;
  performance?: number;
  accessibility?: number;
  bestPractices?: number;
  analysis?: string;
  recommendations?: Recommendation[];
}

interface PDFProps {
  report: AuditReport | null;
  url: string;
}

const PDFGenerator: React.FC<PDFProps> = ({ report, url }) => {
  const handleDownloadPDF = () => {
    if (!report) return;

    const pdf = new jsPDF("p", "mm", "a4");
    const pageWidth = pdf.internal.pageSize.getWidth();
    const pageHeight = pdf.internal.pageSize.getHeight();
    const margin = 16;
    const contentWidth = pageWidth - margin * 2;
    let yPosition = margin;

    /** -------------------------------- COVER PAGE -------------------------------- **/
    pdf.setFillColor(15, 118, 110);
    pdf.rect(0, 0, pageWidth, pageHeight, "F");

    pdf.setFillColor(255, 255, 255);
    pdf.circle(pageWidth / 2, 60, 20, "F");

    pdf.setTextColor(255, 255, 255);
    pdf.setFont("helvetica", "bold");
    pdf.setFontSize(28);
    pdf.text("SEO AUDIT REPORT", pageWidth / 2, 100, { align: "center" });

    pdf.setFontSize(16);
    pdf.setFont("helvetica", "normal");
    pdf.text("Comprehensive Website Analysis", pageWidth / 2, 115, {
      align: "center",
    });

    pdf.setFontSize(14);
    pdf.text(`Website: ${url}`, pageWidth / 2, 140, { align: "center" });

    pdf.setFontSize(12);
    pdf.text(
      `Generated on: ${new Date().toLocaleDateString("en-US", {
        year: "numeric",
        month: "long",
        day: "numeric",
        hour: "2-digit",
        minute: "2-digit",
      })}`,
      pageWidth / 2,
      155,
      { align: "center" }
    );

    pdf.setFontSize(10);
    pdf.text("Generated by RankSeo.in", pageWidth / 2, pageHeight - 20, {
      align: "center",
    });

    pdf.addPage();

    /** -------------------------------- TOC -------------------------------- **/
    yPosition = margin;
    pdf.setFontSize(16);
    pdf.setTextColor(15, 118, 110);
    pdf.text("TABLE OF CONTENTS", margin, yPosition);
    yPosition += 8;
    pdf.line(margin, yPosition, pageWidth - margin, yPosition);
    yPosition += 10;

    const contents = [
      { title: "Executive Summary", page: 3 },
      { title: "Score Overview", page: 3 },
      { title: "Detailed Analysis", page: 4 },
      { title: "Recommendations", page: 6 },
    ];

    pdf.setFontSize(12);
    pdf.setTextColor(0, 0, 0);
    contents.forEach((item) => {
      pdf.text(item.title, margin, yPosition);
      pdf.text(`Page ${item.page}`, pageWidth - margin, yPosition, {
        align: "right",
      });
      yPosition += 8;
    });

    pdf.addPage();

    /** -------------------------------- EXECUTIVE SUMMARY -------------------------------- **/
    yPosition = margin;
    pdf.setFontSize(16);
    pdf.setTextColor(15, 118, 110);
    pdf.text("EXECUTIVE SUMMARY", margin, yPosition);
    yPosition += 8;
    pdf.line(margin, yPosition, pageWidth - margin, yPosition);
    yPosition += 12;

    pdf.setFontSize(11);
    pdf.setTextColor(0, 0, 0);
    const summaryText = `This report provides a comprehensive analysis of ${url} based on industry-standard metrics for SEO, performance, accessibility, and best practices. The following sections detail specific findings and actionable recommendations to improve your website's overall quality and search engine visibility.`;
    const summaryLines = pdf.splitTextToSize(summaryText, contentWidth);
    pdf.text(summaryLines, margin, yPosition);
    yPosition += summaryLines.length * 6 + 12;

    /** -------------------------------- SCORE OVERVIEW -------------------------------- **/
    pdf.setFontSize(16);
    pdf.setTextColor(15, 118, 110);
    pdf.text("SCORE OVERVIEW", margin, yPosition);
    yPosition += 8;
    pdf.line(margin, yPosition, pageWidth - margin, yPosition);
    yPosition += 12;

    const scores = [
      { label: "SEO", score: report.seo ?? 0 },
      { label: "Performance", score: report.performance ?? 0 },
      { label: "Accessibility", score: report.accessibility ?? 0 },
      { label: "Best Practices", score: report.bestPractices ?? 0 },
    ];

    const barHeight = 6;
    const barWidth = contentWidth - 40;

    scores.forEach((item) => {
      pdf.setFontSize(11);
      pdf.setTextColor(0, 0, 0);
      pdf.text(`${item.label}: ${item.score}/100`, margin, yPosition);

      yPosition += 4;
      pdf.setDrawColor(200, 200, 200);
      pdf.setFillColor(230, 230, 230);
      pdf.rect(margin, yPosition, barWidth, barHeight, "F");

      let fillColor: [number, number, number];
      if (item.score >= 90) fillColor = [22, 163, 74];
      else if (item.score >= 70) fillColor = [13, 148, 136];
      else if (item.score >= 50) fillColor = [202, 138, 4];
      else fillColor = [220, 38, 38];

      const filledWidth = (item.score / 100) * barWidth;
      pdf.setFillColor(...fillColor);
      pdf.rect(margin, yPosition, filledWidth, barHeight, "F");

      yPosition += barHeight + 10;
    });

    pdf.setFontSize(10);
    pdf.setTextColor(100, 100, 100);
    pdf.text(
      "Scores: 90-100 (Excellent), 70-89 (Good), 50-69 (Needs Improvement), 0-49 (Poor)",
      margin,
      yPosition
    );

    pdf.addPage();
    yPosition = margin;

    /** -------------------------------- DETAILED ANALYSIS -------------------------------- **/
    pdf.setFontSize(16);
    pdf.setTextColor(15, 118, 110);
    pdf.text("DETAILED ANALYSIS", margin, yPosition);
    yPosition += 8;
    pdf.line(margin, yPosition, pageWidth - margin, yPosition);
    yPosition += 12;

    const cleanAnalysis = report.analysis
      ? report.analysis
          .replace(/#{1,6}\s/g, "")
          .replace(/\*\*(.*?)\*\*/g, "$1")
          .replace(/\*(.*?)\*/g, "$1")
          .replace(/---/g, "")
          .replace(/\n\s*\n/g, "\n")
      : "No analysis available";

    const analysisLines = pdf.splitTextToSize(cleanAnalysis, contentWidth);
    analysisLines.forEach((line: string | string[]) => {
      if (yPosition > pageHeight - 20) {
        pdf.addPage();
        yPosition = margin;
      }
      pdf.text(line, margin, yPosition);
      yPosition += 6;
    });

    /** -------------------------------- RECOMMENDATIONS -------------------------------- **/
    if (report.recommendations?.length) {
      if (yPosition > pageHeight - 30) {
        pdf.addPage();
        yPosition = margin;
      }

      pdf.setFontSize(16);
      pdf.setTextColor(15, 118, 110);
      pdf.text("RECOMMENDATIONS", margin, yPosition);
      yPosition += 8;
      pdf.line(margin, yPosition, pageWidth - margin, yPosition);
      yPosition += 12;

      report.recommendations.forEach((rec, index) => {
        if (yPosition > pageHeight - 25) {
          pdf.addPage();
          yPosition = margin;
        }

        let color: [number, number, number];
        if (rec.priority === "High") color = [220, 38, 38];
        else if (rec.priority === "Medium") color = [202, 138, 4];
        else color = [22, 163, 74];

        pdf.setFillColor(...color);
        pdf.rect(margin, yPosition, 4, 4, "F");

        pdf.setFont("helvetica", "bold");
        const recLines = pdf.splitTextToSize(
          `${index + 1}. ${rec.text}`,
          contentWidth - 10
        );
        pdf.setTextColor(0, 0, 0);
        pdf.text(recLines, margin + 8, yPosition + 4);
        yPosition += recLines.length * 6 + 2;

        pdf.setFont("helvetica", "normal");
        pdf.setTextColor(...color);
        pdf.text(`Priority: ${rec.priority}`, margin + 8, yPosition + 4);
        yPosition += 10;
      });
    }

    /** -------------------------------- FOOTER -------------------------------- **/
    const totalPages = pdf.getNumberOfPages();
    for (let i = 1; i <= totalPages; i++) {
      pdf.setPage(i);
      pdf.setFontSize(10);
      pdf.setTextColor(150, 150, 150);
      pdf.text(
        `Page ${i} of ${totalPages}`,
        pageWidth - margin,
        pageHeight - 10,
        { align: "right" }
      );

      if (i > 1) {
        pdf.setFontSize(8);
        pdf.setTextColor(200, 200, 200);
        pdf.text("CONFIDENTIAL", pageWidth / 2, pageHeight - 10, {
          align: "center",
        });
      }
    }

    /** -------------------------------- SAVE PDF -------------------------------- **/
    pdf.save(
      `SEO-Audit-Report-${url.replace(/https?:\/\//, "").split("/")[0]}.pdf`
    );
  };

  return (
    <button
      onClick={handleDownloadPDF}
      className="px-4 py-2 bg-teal-600 text-white rounded-lg shadow hover:bg-teal-700 transition"
    >
      Download PDF
    </button>
  );
};

export default PDFGenerator;
